#!/usr/bin/perl
#verkle gas estimator
# calculate the gas cost of a transaction , if it were
use List::Util qw( min max );

if ( $ARGV[0] eq "-a" ) {
    $dumpall=1;
    shift;
}
$args=join " ", @ARGV;

die qq{usage: $0 {tx|file} [-r network]
count storage "slots" (blocks of 31 bytes) of each contract in a transaction.
Parameters:
	tx - tx to read. It (and all following params) are passed directly into `cast run -t --quick`
	file - if the first param is an existing file, it is read instead.
		The file should be the output of `cast run -t --quick {tx} > FILE`
} unless $args;

$CAST="/Users/dror/Downloads/aa/foundry/target/release/cast";

if ( -r $args ) {
    #read file instead of running cast run"
    open RUN, $args;

} else {
    open RUN, "$CAST run -t --quick $args |";
}

@addrs=();
$lastdepth=0;
while (<RUN>) {
    last if /Traces:/;
    next if /CREATE CALL:/;
    if ( /SM CALL.*code_address: (\w+)/ ) {
        $code_address = $1;
        # used in next "depth" check, below 
        # (ignored if no depth change, i.e. precompile)
        next;
    }

    ( $depth, $pc, $opcode ) = /depth:(\d+).*PC:(\d+),.*OPCODE: "(\w+)"/;
    die "invalid line: $_" unless $depth;
    if ( $depth ) {
        if ( $depth == $lastdepth +1 ) {
            push @addrs, $code_address;
            $addr = $addrs[$#addrs];
        }
        if ( $depth == $lastdepth-1 ) {
            pop @addrs;
            $addr = $addrs[$#addrs];
        }
        $slots{$addr}{int($pc/31)} ++;
        printf "%s, %5d, %5d, %s\n", $addr, int($pc/31), $pc, $opcode if $ENV{DEBUG};
        $lastdepth = $depth;
        next;
    }
}

print "verkle slots used by each address (slot=pc//31)\n";
#dump # of unique slots used by each address
foreach $addr ( keys %slots ) {
    # @keys = keys %{$slots{addr}};
    $max  = max(keys %{$slots{$addr}});
    $keys = keys %{$slots{$addr}};
    if ($dumpall) {
        printf "%s %5d (max=%4d), all=%s\n",$addr,$keys, $max, join(",",keys %{$slots{$addr}});
    } else {
        printf "%s %5d (max=%4d)\n",$addr,$keys, $max, join(",",keys %{$slots{$addr}});
    }
}

__END__
cast run --quick 0x093cce8d9c5e2d1c60b6ca19013c36d7de4dfb28df9ba27371fc7ea694a3d6d7 -t | tee tx-0x093cce8d9c5e2d1c60b6ca19013c36d7de4dfb28df9ba27371fc7ea694a3d6d7.txt

SM CALL:   0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789,context:CallContext { address: 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789, caller: 0x226a22889b7f842fb1426b3e81130b461abda8a5, code_address: 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789, apparent_value: 0x0_U256, scheme: Call }, is_static:false, transfer:Transfer { source: 0x226a22889b7f842fb1426b3e81130b461abda8a5, target: 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789, value: 0x0_U256 }, input_size:1220
depth:1, PC:0, gas:0x36a5a(223834), OPCODE: "PUSH1"(96)  refund:0x0(0) Stack:[], Data size:0, Data: 0x
